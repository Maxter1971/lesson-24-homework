{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://lesson-24-homework/./src/curring.ts","webpack://lesson-24-homework/./src/summator.ts","webpack://lesson-24-homework/./src/parallel.ts","webpack://lesson-24-homework/./src/index.ts","webpack://lesson-24-homework/./src/semver.ts","webpack://lesson-24-homework/./src/spiral.ts"],"sourcesContent":["function curry(func: Function) {\n  return function curried(...args: number[]) {\n    let res: Function;\n    if (args.length >= func.length) {\n      res = func.apply(curried, args);\n    } else {\n      res = function (...args2: number[]) {\n        return curried.apply(curried, args.concat(args2));\n      };\n    }\n    return res;\n  };\n}\n\nfunction sum(a: number, b: number, c: number, d: number, e: number) {\n  return a + b + c + d + e;\n}\n\nexport const curriedSum = curry(sum);\n","export const summator = function (...args: any): Function {\n  const sum = args.reduce((a: number, b: number) => a + b, 0);\n\n  const func = (...newargs: number[] | []) => {\n    const res = newargs.length === 0 ? sum : summator(...args, ...newargs);\n    return res;\n  };\n\n  func.valueOf = () => sum;\n  func.toString = () => sum;\n  return func;\n};\n","class PromiseExt {\n  static whenAny(promises: Promise<number>[]) {\n    return new Promise<any>((resolve, reject) => {\n      let result: [Promise<number>];\n      for (const promise of promises) {\n        //  if (result) break;\n        // console.log(result);\n        const func = () => {\n          if (!result) {\n            result = [promise];\n            console.log(result);\n            resolve(result);\n          }\n        };\n        promise.then(func, func);\n      }\n    });\n  }\n}\nexport class Parallel {\n  concurrencyLevel: number;\n\n  constructor(concurrencyLevel: number) {\n    this.concurrencyLevel = concurrencyLevel;\n  }\n\n  async jobs(...funcs: Function[]) {\n    const result = new Array(funcs.length);\n    let nextIndex = 0;\n    const tmpTasks: Promise<number>[] = [];\n    const tmpIndexes: number[] = [];\n    while (nextIndex < this.concurrencyLevel && nextIndex < funcs.length) {\n      tmpTasks.push(funcs[nextIndex]());\n      tmpIndexes.push(nextIndex);\n      nextIndex++;\n    }\n    let i = 0;\n    while (tmpTasks.length) {\n      const task: Promise<number> = (await PromiseExt.whenAny(tmpTasks))[0];\n      const index = tmpTasks.indexOf(task);\n      tmpTasks.splice(index, 1);\n      const originalIndex = i;\n      tmpIndexes.splice(index, 1);\n      try {\n        result[originalIndex] = await task;\n      } catch (error) {\n        result[originalIndex] = error;\n      }\n      if (nextIndex < funcs.length) {\n        tmpTasks.push(funcs[nextIndex]());\n        tmpIndexes.push(nextIndex);\n        nextIndex++;\n      }\n      i++;\n    }\n\n    return result;\n  }\n}\n(async function main() {\n  const runner = new Parallel(2);\n  console.log(\n    await runner.jobs(\n      () => new Promise((resolve) => setTimeout(resolve, 10, 1)),\n      () => new Promise((resolve) => setTimeout(resolve, 50, 2)),\n      () => new Promise((resolve) => setTimeout(resolve, 20, 3)),\n      () => new Promise((resolve) => setTimeout(resolve, 90, 4)),\n      () => new Promise((resolve) => setTimeout(resolve, 30, 5))\n    )\n  );\n})();\n","import { curriedSum } from \"./curring\";\nimport { summator } from \"./summator\";\nimport { Parallel } from \"./parallel\";\nimport { spiral } from \"./spiral\";\nimport { semver } from \"./semver\";\n\nconst sm = semver([\n  \"1.0.5\",\n  \"2.5.0\",\n  \"0.12.0\",\n  \"1\",\n  \"1.23.45\",\n  \"1.4.50\",\n  \"1.2.3.4.5.6.7\",\n]);\nconsole.log(sm);\n\nconst sp = spiral([\n  [0, 1, 2, 3, 4],\n  [5, 6, 7, 8, 9],\n  [10, 11, 12, 13, 14],\n  [15, 16, 17, 18, 19],\n]);\nconsole.log(sp); // [0, 1, 2, 3, 4, 9, 14, 19, 18, 17, 16, 15, 10, 5, 6, 7, 8, 13, 12, 11]\n\nconsole.log(curriedSum(1, 2, 3, 4, 5));\nconsole.log(curriedSum(2, 3, 4)(5, 6));\nconsole.log(curriedSum(3, 4)(5, 6)(7));\nconsole.log(curriedSum(4, 5)(6)(7, 8));\nconsole.log(curriedSum(5)(6)(7)(8)(9));\n\nalert(summator()); // 0;\n\nconst s = summator();\nalert(s);\nalert(s(1)); // 1\nalert(s(1)(2)); // 3\nalert(s(3)(4)(5)); // 12\nconst s3 = summator(3);\nalert(s3(5)); // 8\nalert(s3(6)); // 9\n\nasync function main() {\n  const runner = new Parallel(2);\n  console.log(\n    await runner.jobs(\n      () => new Promise((resolve) => setTimeout(resolve, 10, 1)),\n      () => new Promise((resolve) => setTimeout(resolve, 50, 2)),\n      () => new Promise((resolve) => setTimeout(resolve, 20, 3)),\n      () => new Promise((resolve) => setTimeout(resolve, 90, 4)),\n      () => new Promise((resolve) => setTimeout(resolve, 30, 5))\n    )\n  );\n}\nmain();\n","export function semver(arr: string[]) {\n  return arr.sort(compare);\n}\n\nfunction compare(a: string, b: string) {\n  if (a === b) {\n    return 0;\n  }\n\n  const aComponents = a.split(\".\");\n  const bComponents = b.split(\".\");\n\n  const len = Math.min(aComponents.length, bComponents.length);\n\n  for (let i = 0; i < len; i++) {\n    if (parseInt(aComponents[i], 10) > parseInt(bComponents[i], 10)) {\n      return 1;\n    }\n\n    if (parseInt(aComponents[i], 10) < parseInt(bComponents[i], 10)) {\n      return -1;\n    }\n  }\n\n  if (aComponents.length > bComponents.length) {\n    return 1;\n  }\n\n  if (aComponents.length < bComponents.length) {\n    return -1;\n  }\n\n  return 0;\n}\n","export function spiral(matrix: number[][]) {\n  let counter = 0;\n  let startCol = 0;\n  let endCol = matrix[0].length - 1;\n  let startRow = 0;\n  let endRow = matrix.length - 1;\n  const out: number[] = new Array(matrix[0].length * matrix.length);\n  while (startCol <= endCol && startRow <= endRow) {\n    for (let i = startCol; i <= endCol; i++) {\n      out[counter] = matrix[startRow][i];\n      counter++;\n    }\n    startRow++;\n    for (let j = startRow; j <= endRow; j++) {\n      out[counter] = matrix[j][endCol];\n      counter++;\n    }\n    endCol--;\n    for (let i = endCol; i >= startCol; i--) {\n      out[counter] = matrix[endRow][i];\n      counter++;\n    }\n    endRow--;\n    for (let j = endRow; j >= startRow; j--) {\n      out[counter] = matrix[j][startCol];\n      counter++;\n    }\n    startCol++;\n  }\n\n  return out;\n}\n"],"names":["func","curriedSum","a","b","c","d","e","curried","args","res","length","apply","args2","concat","summator","sum","reduce","newargs","valueOf","toString","PromiseExt","promises","Promise","resolve","reject","result","promise","console","log","then","Parallel","concurrencyLevel","this","funcs","Array","nextIndex","tmpTasks","tmpIndexes","push","i","whenAny","task","index","indexOf","splice","originalIndex","runner","jobs","setTimeout","sm","sort","aComponents","split","bComponents","len","Math","min","parseInt","sp","matrix","counter","startCol","endCol","startRow","endRow","out","j","spiral","alert","s","s3","main"],"sourceRoot":""}